<?php
/**
 * DispatchRouteBase
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Samsara API
 *
 * # Introduction The Samsara REST API lets you interact with the Samsara Cloud from anything that can send an HTTP request. With the Samsara API you can build powerful applications and custom solutions with sensor data.  Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets. If you’re familiar with what you can build with a REST API, the following API reference guide will be your go-to resource.  API access to the Samsara cloud is available to all Samsara administrators. If you’d like to try the API, [contact us](https://www.samsara.com/free-trial). The API is currently in beta and may be subject to frequent changes.  # Connecting to the API There are two ways to connect to the API. If you prefer to use the API in Javascript or Python, we supply SDKs which you can download here: [Javascript SDK](https://github.com/samsarahq/samsara-js), [Python SDK](https://github.com/samsarahq/samsara-python).  If you’d rather use another language to interact with the Samsara API, the endpoints and examples are in the reference guide below.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DispatchRouteBase Class Doc Comment
 *
 * @category Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DispatchRouteBase implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DispatchRouteBase';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'vehicle_id' => 'int',
        'driver_id' => 'int',
        'scheduled_start_ms' => 'int',
        'scheduled_end_ms' => 'int',
        'name' => 'string',
        'group_id' => 'int',
        'start_location_name' => 'string',
        'start_location_address' => 'string',
        'start_location_lat' => 'float',
        'start_location_lng' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'vehicle_id' => 'int64',
        'driver_id' => 'int64',
        'scheduled_start_ms' => 'int64',
        'scheduled_end_ms' => 'int64',
        'name' => null,
        'group_id' => 'int64',
        'start_location_name' => null,
        'start_location_address' => null,
        'start_location_lat' => 'float',
        'start_location_lng' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vehicle_id' => 'vehicle_id',
        'driver_id' => 'driver_id',
        'scheduled_start_ms' => 'scheduled_start_ms',
        'scheduled_end_ms' => 'scheduled_end_ms',
        'name' => 'name',
        'group_id' => 'group_id',
        'start_location_name' => 'start_location_name',
        'start_location_address' => 'start_location_address',
        'start_location_lat' => 'start_location_lat',
        'start_location_lng' => 'start_location_lng'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vehicle_id' => 'setVehicleId',
        'driver_id' => 'setDriverId',
        'scheduled_start_ms' => 'setScheduledStartMs',
        'scheduled_end_ms' => 'setScheduledEndMs',
        'name' => 'setName',
        'group_id' => 'setGroupId',
        'start_location_name' => 'setStartLocationName',
        'start_location_address' => 'setStartLocationAddress',
        'start_location_lat' => 'setStartLocationLat',
        'start_location_lng' => 'setStartLocationLng'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vehicle_id' => 'getVehicleId',
        'driver_id' => 'getDriverId',
        'scheduled_start_ms' => 'getScheduledStartMs',
        'scheduled_end_ms' => 'getScheduledEndMs',
        'name' => 'getName',
        'group_id' => 'getGroupId',
        'start_location_name' => 'getStartLocationName',
        'start_location_address' => 'getStartLocationAddress',
        'start_location_lat' => 'getStartLocationLat',
        'start_location_lng' => 'getStartLocationLng'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vehicle_id'] = isset($data['vehicle_id']) ? $data['vehicle_id'] : null;
        $this->container['driver_id'] = isset($data['driver_id']) ? $data['driver_id'] : null;
        $this->container['scheduled_start_ms'] = isset($data['scheduled_start_ms']) ? $data['scheduled_start_ms'] : null;
        $this->container['scheduled_end_ms'] = isset($data['scheduled_end_ms']) ? $data['scheduled_end_ms'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['group_id'] = isset($data['group_id']) ? $data['group_id'] : null;
        $this->container['start_location_name'] = isset($data['start_location_name']) ? $data['start_location_name'] : null;
        $this->container['start_location_address'] = isset($data['start_location_address']) ? $data['start_location_address'] : null;
        $this->container['start_location_lat'] = isset($data['start_location_lat']) ? $data['start_location_lat'] : null;
        $this->container['start_location_lng'] = isset($data['start_location_lng']) ? $data['start_location_lng'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['scheduled_start_ms'] === null) {
            $invalidProperties[] = "'scheduled_start_ms' can't be null";
        }
        if ($this->container['scheduled_end_ms'] === null) {
            $invalidProperties[] = "'scheduled_end_ms' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['start_location_lat'] === null) {
            $invalidProperties[] = "'start_location_lat' can't be null";
        }
        if ($this->container['start_location_lng'] === null) {
            $invalidProperties[] = "'start_location_lng' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['scheduled_start_ms'] === null) {
            return false;
        }
        if ($this->container['scheduled_end_ms'] === null) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if ($this->container['start_location_lat'] === null) {
            return false;
        }
        if ($this->container['start_location_lng'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets vehicle_id
     *
     * @return int
     */
    public function getVehicleId()
    {
        return $this->container['vehicle_id'];
    }

    /**
     * Sets vehicle_id
     *
     * @param int $vehicle_id ID of the vehicle assigned to the dispatch route. Note that vehicle_id and driver_id are mutually exclusive. If neither is specified, then the route is unassigned.
     *
     * @return $this
     */
    public function setVehicleId($vehicle_id)
    {
        $this->container['vehicle_id'] = $vehicle_id;

        return $this;
    }

    /**
     * Gets driver_id
     *
     * @return int
     */
    public function getDriverId()
    {
        return $this->container['driver_id'];
    }

    /**
     * Sets driver_id
     *
     * @param int $driver_id ID of the driver assigned to the dispatch route. Note that driver_id and vehicle_id are mutually exclusive. If neither is specified, then the route is unassigned.
     *
     * @return $this
     */
    public function setDriverId($driver_id)
    {
        $this->container['driver_id'] = $driver_id;

        return $this;
    }

    /**
     * Gets scheduled_start_ms
     *
     * @return int
     */
    public function getScheduledStartMs()
    {
        return $this->container['scheduled_start_ms'];
    }

    /**
     * Sets scheduled_start_ms
     *
     * @param int $scheduled_start_ms The time in Unix epoch milliseconds that the route is scheduled to start.
     *
     * @return $this
     */
    public function setScheduledStartMs($scheduled_start_ms)
    {
        $this->container['scheduled_start_ms'] = $scheduled_start_ms;

        return $this;
    }

    /**
     * Gets scheduled_end_ms
     *
     * @return int
     */
    public function getScheduledEndMs()
    {
        return $this->container['scheduled_end_ms'];
    }

    /**
     * Sets scheduled_end_ms
     *
     * @param int $scheduled_end_ms The time in Unix epoch milliseconds that the last job in the route is scheduled to end.
     *
     * @return $this
     */
    public function setScheduledEndMs($scheduled_end_ms)
    {
        $this->container['scheduled_end_ms'] = $scheduled_end_ms;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Descriptive name of this route.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return int
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param int $group_id ID of the group if the organization has multiple groups (optional).
     *
     * @return $this
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets start_location_name
     *
     * @return string
     */
    public function getStartLocationName()
    {
        return $this->container['start_location_name'];
    }

    /**
     * Sets start_location_name
     *
     * @param string $start_location_name The name of the route's starting location.
     *
     * @return $this
     */
    public function setStartLocationName($start_location_name)
    {
        $this->container['start_location_name'] = $start_location_name;

        return $this;
    }

    /**
     * Gets start_location_address
     *
     * @return string
     */
    public function getStartLocationAddress()
    {
        return $this->container['start_location_address'];
    }

    /**
     * Sets start_location_address
     *
     * @param string $start_location_address The address of the route's starting location, as it would be recognized if provided to maps.google.com
     *
     * @return $this
     */
    public function setStartLocationAddress($start_location_address)
    {
        $this->container['start_location_address'] = $start_location_address;

        return $this;
    }

    /**
     * Gets start_location_lat
     *
     * @return float
     */
    public function getStartLocationLat()
    {
        return $this->container['start_location_lat'];
    }

    /**
     * Sets start_location_lat
     *
     * @param float $start_location_lat Latitude of the destination in decimal degrees.
     *
     * @return $this
     */
    public function setStartLocationLat($start_location_lat)
    {
        $this->container['start_location_lat'] = $start_location_lat;

        return $this;
    }

    /**
     * Gets start_location_lng
     *
     * @return float
     */
    public function getStartLocationLng()
    {
        return $this->container['start_location_lng'];
    }

    /**
     * Sets start_location_lng
     *
     * @param float $start_location_lng Latitude of the destination in decimal degrees.
     *
     * @return $this
     */
    public function setStartLocationLng($start_location_lng)
    {
        $this->container['start_location_lng'] = $start_location_lng;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

