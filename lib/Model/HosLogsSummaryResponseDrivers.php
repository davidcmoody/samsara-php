<?php
/**
 * HosLogsSummaryResponseDrivers
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Samsara API
 *
 * # Introduction The Samsara REST API lets you interact with the Samsara Cloud from anything that can send an HTTP request. With the Samsara API you can build powerful applications and custom solutions with sensor data.  Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets. If you’re familiar with what you can build with a REST API, the following API reference guide will be your go-to resource.  API access to the Samsara cloud is available to all Samsara administrators. If you’d like to try the API, [contact us](https://www.samsara.com/free-trial). The API is currently in beta and may be subject to frequent changes.  # Connecting to the API There are two ways to connect to the API. If you prefer to use the API in Javascript or Python, we supply SDKs which you can download here: [Javascript SDK](https://github.com/samsarahq/samsara-js), [Python SDK](https://github.com/samsarahq/samsara-python).  If you’d rather use another language to interact with the Samsara API, the endpoints and examples are in the reference guide below.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * HosLogsSummaryResponseDrivers Class Doc Comment
 *
 * @category Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class HosLogsSummaryResponseDrivers implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HosLogsSummaryResponse_drivers';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'driver_id' => 'int',
        'driver_name' => 'string',
        'vehicle_name' => 'string',
        'duty_status' => 'string',
        'time_in_current_status' => 'int',
        'time_until_break' => 'int',
        'shift_drive_remaining' => 'int',
        'shift_remaining' => 'int',
        'cycle_remaining' => 'int',
        'cycle_tomorrow' => 'int',
        'driving_in_violation_today' => 'int',
        'driving_in_violation_cycle' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'driver_id' => 'int64',
        'driver_name' => null,
        'vehicle_name' => null,
        'duty_status' => null,
        'time_in_current_status' => 'int64',
        'time_until_break' => 'int64',
        'shift_drive_remaining' => 'int64',
        'shift_remaining' => 'int64',
        'cycle_remaining' => 'int64',
        'cycle_tomorrow' => 'int64',
        'driving_in_violation_today' => 'int64',
        'driving_in_violation_cycle' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'driver_id' => 'driverId',
        'driver_name' => 'driverName',
        'vehicle_name' => 'vehicleName',
        'duty_status' => 'dutyStatus',
        'time_in_current_status' => 'timeInCurrentStatus',
        'time_until_break' => 'timeUntilBreak',
        'shift_drive_remaining' => 'shiftDriveRemaining',
        'shift_remaining' => 'shiftRemaining',
        'cycle_remaining' => 'cycleRemaining',
        'cycle_tomorrow' => 'cycleTomorrow',
        'driving_in_violation_today' => 'drivingInViolationToday',
        'driving_in_violation_cycle' => 'drivingInViolationCycle'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'driver_id' => 'setDriverId',
        'driver_name' => 'setDriverName',
        'vehicle_name' => 'setVehicleName',
        'duty_status' => 'setDutyStatus',
        'time_in_current_status' => 'setTimeInCurrentStatus',
        'time_until_break' => 'setTimeUntilBreak',
        'shift_drive_remaining' => 'setShiftDriveRemaining',
        'shift_remaining' => 'setShiftRemaining',
        'cycle_remaining' => 'setCycleRemaining',
        'cycle_tomorrow' => 'setCycleTomorrow',
        'driving_in_violation_today' => 'setDrivingInViolationToday',
        'driving_in_violation_cycle' => 'setDrivingInViolationCycle'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'driver_id' => 'getDriverId',
        'driver_name' => 'getDriverName',
        'vehicle_name' => 'getVehicleName',
        'duty_status' => 'getDutyStatus',
        'time_in_current_status' => 'getTimeInCurrentStatus',
        'time_until_break' => 'getTimeUntilBreak',
        'shift_drive_remaining' => 'getShiftDriveRemaining',
        'shift_remaining' => 'getShiftRemaining',
        'cycle_remaining' => 'getCycleRemaining',
        'cycle_tomorrow' => 'getCycleTomorrow',
        'driving_in_violation_today' => 'getDrivingInViolationToday',
        'driving_in_violation_cycle' => 'getDrivingInViolationCycle'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['driver_id'] = isset($data['driver_id']) ? $data['driver_id'] : null;
        $this->container['driver_name'] = isset($data['driver_name']) ? $data['driver_name'] : null;
        $this->container['vehicle_name'] = isset($data['vehicle_name']) ? $data['vehicle_name'] : null;
        $this->container['duty_status'] = isset($data['duty_status']) ? $data['duty_status'] : null;
        $this->container['time_in_current_status'] = isset($data['time_in_current_status']) ? $data['time_in_current_status'] : null;
        $this->container['time_until_break'] = isset($data['time_until_break']) ? $data['time_until_break'] : null;
        $this->container['shift_drive_remaining'] = isset($data['shift_drive_remaining']) ? $data['shift_drive_remaining'] : null;
        $this->container['shift_remaining'] = isset($data['shift_remaining']) ? $data['shift_remaining'] : null;
        $this->container['cycle_remaining'] = isset($data['cycle_remaining']) ? $data['cycle_remaining'] : null;
        $this->container['cycle_tomorrow'] = isset($data['cycle_tomorrow']) ? $data['cycle_tomorrow'] : null;
        $this->container['driving_in_violation_today'] = isset($data['driving_in_violation_today']) ? $data['driving_in_violation_today'] : null;
        $this->container['driving_in_violation_cycle'] = isset($data['driving_in_violation_cycle']) ? $data['driving_in_violation_cycle'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets driver_id
     *
     * @return int
     */
    public function getDriverId()
    {
        return $this->container['driver_id'];
    }

    /**
     * Sets driver_id
     *
     * @param int $driver_id ID of the driver.
     *
     * @return $this
     */
    public function setDriverId($driver_id)
    {
        $this->container['driver_id'] = $driver_id;

        return $this;
    }

    /**
     * Gets driver_name
     *
     * @return string
     */
    public function getDriverName()
    {
        return $this->container['driver_name'];
    }

    /**
     * Sets driver_name
     *
     * @param string $driver_name Name of the driver.
     *
     * @return $this
     */
    public function setDriverName($driver_name)
    {
        $this->container['driver_name'] = $driver_name;

        return $this;
    }

    /**
     * Gets vehicle_name
     *
     * @return string
     */
    public function getVehicleName()
    {
        return $this->container['vehicle_name'];
    }

    /**
     * Sets vehicle_name
     *
     * @param string $vehicle_name Name of the vehicle.
     *
     * @return $this
     */
    public function setVehicleName($vehicle_name)
    {
        $this->container['vehicle_name'] = $vehicle_name;

        return $this;
    }

    /**
     * Gets duty_status
     *
     * @return string
     */
    public function getDutyStatus()
    {
        return $this->container['duty_status'];
    }

    /**
     * Sets duty_status
     *
     * @param string $duty_status The Hours of Service status type. One of `OFF_DUTY`, `SLEEPER_BED`, `DRIVING`, `ON_DUTY`, `YARD_MOVE`, `PERSONAL_CONVEYANCE`.
     *
     * @return $this
     */
    public function setDutyStatus($duty_status)
    {
        $this->container['duty_status'] = $duty_status;

        return $this;
    }

    /**
     * Gets time_in_current_status
     *
     * @return int
     */
    public function getTimeInCurrentStatus()
    {
        return $this->container['time_in_current_status'];
    }

    /**
     * Sets time_in_current_status
     *
     * @param int $time_in_current_status The amount of time (in ms) that the driver has been in the current `dutyStatus`.
     *
     * @return $this
     */
    public function setTimeInCurrentStatus($time_in_current_status)
    {
        $this->container['time_in_current_status'] = $time_in_current_status;

        return $this;
    }

    /**
     * Gets time_until_break
     *
     * @return int
     */
    public function getTimeUntilBreak()
    {
        return $this->container['time_until_break'];
    }

    /**
     * Sets time_until_break
     *
     * @param int $time_until_break The amount of time (in ms) remaining until the driver cannot drive without a rest break.
     *
     * @return $this
     */
    public function setTimeUntilBreak($time_until_break)
    {
        $this->container['time_until_break'] = $time_until_break;

        return $this;
    }

    /**
     * Gets shift_drive_remaining
     *
     * @return int
     */
    public function getShiftDriveRemaining()
    {
        return $this->container['shift_drive_remaining'];
    }

    /**
     * Sets shift_drive_remaining
     *
     * @param int $shift_drive_remaining The amount of remaining shift drive time (in ms).
     *
     * @return $this
     */
    public function setShiftDriveRemaining($shift_drive_remaining)
    {
        $this->container['shift_drive_remaining'] = $shift_drive_remaining;

        return $this;
    }

    /**
     * Gets shift_remaining
     *
     * @return int
     */
    public function getShiftRemaining()
    {
        return $this->container['shift_remaining'];
    }

    /**
     * Sets shift_remaining
     *
     * @param int $shift_remaining The amount of remaining shift time (in ms).
     *
     * @return $this
     */
    public function setShiftRemaining($shift_remaining)
    {
        $this->container['shift_remaining'] = $shift_remaining;

        return $this;
    }

    /**
     * Gets cycle_remaining
     *
     * @return int
     */
    public function getCycleRemaining()
    {
        return $this->container['cycle_remaining'];
    }

    /**
     * Sets cycle_remaining
     *
     * @param int $cycle_remaining The amount of remaining cycle time (in ms).
     *
     * @return $this
     */
    public function setCycleRemaining($cycle_remaining)
    {
        $this->container['cycle_remaining'] = $cycle_remaining;

        return $this;
    }

    /**
     * Gets cycle_tomorrow
     *
     * @return int
     */
    public function getCycleTomorrow()
    {
        return $this->container['cycle_tomorrow'];
    }

    /**
     * Sets cycle_tomorrow
     *
     * @param int $cycle_tomorrow The amount of cycle time (in ms) available tomorrow.
     *
     * @return $this
     */
    public function setCycleTomorrow($cycle_tomorrow)
    {
        $this->container['cycle_tomorrow'] = $cycle_tomorrow;

        return $this;
    }

    /**
     * Gets driving_in_violation_today
     *
     * @return int
     */
    public function getDrivingInViolationToday()
    {
        return $this->container['driving_in_violation_today'];
    }

    /**
     * Sets driving_in_violation_today
     *
     * @param int $driving_in_violation_today The amount of driving time in violation today (in ms).
     *
     * @return $this
     */
    public function setDrivingInViolationToday($driving_in_violation_today)
    {
        $this->container['driving_in_violation_today'] = $driving_in_violation_today;

        return $this;
    }

    /**
     * Gets driving_in_violation_cycle
     *
     * @return int
     */
    public function getDrivingInViolationCycle()
    {
        return $this->container['driving_in_violation_cycle'];
    }

    /**
     * Sets driving_in_violation_cycle
     *
     * @param int $driving_in_violation_cycle The amount of driving time in violation in this cycle (in ms).
     *
     * @return $this
     */
    public function setDrivingInViolationCycle($driving_in_violation_cycle)
    {
        $this->container['driving_in_violation_cycle'] = $driving_in_violation_cycle;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

